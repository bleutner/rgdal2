% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gdal_public.R
\name{readBlock}
\alias{readBlock}
\alias{writeBlock}
\alias{nBlockRows}
\alias{nBlockCols}
\alias{nBlockDim}
\title{Raster blocks}
\usage{
readBlock(x, i, j)

writeBlock(x, i, j, data)

nBlockRows(x)

nBlockCols(x)

nBlockDim(x)
}
\arguments{
\item{x}{a raster band or dataset}

\item{i}{the block row}

\item{j}{the block column}

\item{data}{an array or vector of data}
}
\value{
\code{readBlock}: a matrix of raster data

\code{writeBlock}: the raster band invisibly

\code{nBlockRows}: number of blocks in y-direction

\code{nBlockCols}: number of blocks in x-direction

\code{nBlockDim}: number of blocks in x- and y- directions
}
\description{
Read and write raster blocks
}
\details{
GDAL raster bands have an internal blocking strcuture. This is usually
a simple scanline, pixel arrangement where each image row is a single
block of data. Other datasets may have internal storage arranged as
tiled blocks of data. Block access is much faster than random IO as
these blocks are cached by the GDAL IO layer. A strategy for efficient
update of large files is to read a block of data, modify it, and then
write the block either into a new dataset or into the original dataset
overwriting the original data.

Note that especially for tiled data, the blocks will not perfectly
subdivide the raster. Portions of marginal blocks on the right and
bottom will often extend beyond the raster extent. Out-of-bound block pixel
values will usually be set to \code{NA} in that case. (Raw byte data does
not have an \code{NA} value defined, so in that case the out-of-bounds
pixels will be set to zero.) However the behavior is driver dependend
and therefore may vary by file type. The returned blocks are not truncated
to fit within the raster.

Whem writing blocks, the \code{\link{storage.mode}} of the value parameter
must match that of the raster band. The dimensions of the object do not
matter; however its length must be equal to the number of elements in a
block. All integral types other than raw are handled as \code{integer} type.
}
\examples{
f = system.file("example-data/gtopo30_gall.tif", package = "rgdal2")
x = openRasterBand(f)
y = getBand(newDataset(nrow(x), ncol(x), dataType = "Int16",
                       driver = "GTiff", opts = c("TILED=YES"),
                       nosave = TRUE))
                       
for ( i in 1:nBlockRows(x) )
  for ( j in 1:nBlockCols(x) )
    writeBlock(y, i, j, readBlock(x, i, j))
    
 draw(y)

}
