% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gdal_public.R
\name{tileCoordIter}
\alias{tileCoordIter}
\alias{tileIter}
\alias{foreach.tile}
\title{Iterate over coordinate regions}
\usage{
tileCoordIter(b, tile.size = getBlockSize(b))

tileIter(b, tile.size = getBlockSize(b), native.indexing = FALSE)

foreach.tile(b, out = newDataset(nrow(b), ncol(b)),
  tile.size = getBlockSize(b), init = getBand(out), combine = NULL,
  final = function(x) x, inorder = FALSE, native.indexing = FALSE)
}
\arguments{
\item{b}{any object for which \code{\link{nrow}} and \code{\link{ncol}} are defined}

\item{tile.size}{the x, y dimensions of the tiles}

\item{native.indexing}{if true, use slower native indexing (see \code{\link{[<-,band}})}

\item{out}{write output to this dataset}

\item{init}{initial input to combine}

\item{combine}{a function to combine result of expression with \code{init}}

\item{final}{a function that returns the final result}

\item{inorder}{process tiles in order?}
}
\value{
a list with elements \code{x} and \code{y}
}
\description{
An iterator over tiled coordinate ranges
}
\details{
When used with \code{\link{foreach}}, this function allows one
to iterator over the coordinates defining a set of tiles. The default
behavior is to call \code{\link{getBlockSize}}, but this can be
overriden, for example, when using an ordinary matrix. The parameter
\code{tile.size} is forced to length 2 so that a scalar can be
passed.

\code{foreach.tile} creates a \code{\link{foreach}} object that can be used
to apply an expression of tiles of data. It uses \code{tileIter} internally.
The default \code{combine} function writes the output into the band returned
by the \code{init} function. Note that the block iterator (\code{i}) has both the raster
values and their x and y coordinates. You can therefore change where the block
of data is written to the output band by manipulating \code{i$x} and \code{i$y}.
}
